{"version":3,"sources":["Today/Today.js","History/History.js","App.js","serviceWorker.js","index.js"],"names":["Today","state","btcprice","ltcprice","ethprice","Pusher","logToConsole","this","pusher","cluster","encrypted","prices","subscribe","setInterval","axios","get","then","response","sendPricePusher","data","setState","BTC","USD","localStorage","setItem","ETH","LTC","catch","error","console","log","navigator","onLine","getItem","bind","price","post","className","Component","History","todayprice","yesterdayprice","twodaysprice","threedaysprice","fourdaysprice","getBTCPrices","getETHPrices","getLTCPrices","date","t","moment","unix","all","spread","eth","btc","ltc","f","format","subtract","getTodayPrice","getYesterdayPrice","getTwoDaysPrice","getThreeDaysPrice","getFourDaysPrice","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e1c79467.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Pusher from \"pusher-js\";\nimport \"./Today.css\";\n\nclass Today extends Component {\n  constructor() {\n    super();\n    this.state = {\n      btcprice: \"\",\n      ltcprice: \"\",\n      ethprice: \"\"\n    };\n  }\n  componentWillMount() {\n    // Enable pusher logging - don't include this in production\n    Pusher.logToConsole = true;\n\n    // establish a connection to Pusher\n    this.pusher = new Pusher(\"0bda97fe3a846a0cdeb8\", {\n      cluster: \"mt1\",\n      encrypted: true\n    });\n\n    // Subscribe to the 'coin-prices' channel\n    this.prices = this.pusher.subscribe(\"coin-prices\");\n\n    setInterval(() => {\n      axios\n        .get(\n          \"https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD\"\n        )\n        .then(response => {\n          this.sendPricePusher(response.data);\n\n          this.setState({ btcprice: response.data.BTC.USD });\n          localStorage.setItem(\"BTC\", response.data.BTC.USD);\n\n          this.setState({ ethprice: response.data.ETH.USD });\n          localStorage.setItem(\"ETH\", response.data.ETH.USD);\n\n          this.setState({ ltcprice: response.data.LTC.USD });\n          localStorage.setItem(\"LTC\", response.data.LTC.USD);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    }, 10000);\n\n    if (!navigator.onLine) {\n      this.setState({ btcprice: localStorage.getItem(\"BTC\") });\n      this.setState({ ethprice: localStorage.getItem(\"ETH\") });\n      this.setState({ ltcprice: localStorage.getItem(\"LTC\") });\n    }\n\n    this.prices.bind(\n      \"prices\",\n      price => {        \n        this.setState({ btcprice: price.prices.BTC.USD });\n        this.setState({ ethprice: price.prices.ETH.USD });\n        this.setState({ ltcprice: price.prices.LTC.USD });\n      },\n      this\n    );\n  }\n\n  sendPricePusher(data) {\n    axios\n      .post(\"//localhost:3001/prices/new\", {\n        prices: data\n      })\n      .then(response => {\n        console.log(response);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  // The render method contains the JSX code which will be compiled to HTML.\n  render() {\n    return (\n      <div className=\"today--section container\">\n        <h2>Current Price</h2>\n        <div className=\"columns today--section__box\">\n          <div className=\"column btc--section\">\n            <h5>${this.state.btcprice}</h5>\n            <p>1 BTC</p>\n          </div>\n          <div className=\"column eth--section\">\n            <h5>${this.state.ethprice}</h5>\n            <p>1 ETH</p>\n          </div>\n          <div className=\"column ltc--section\">\n            <h5>${this.state.ltcprice}</h5>\n            <p>1 LTC</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Today;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport \"./History.css\";\n\nclass History extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todayprice: {},\n      yesterdayprice: {},\n      twodaysprice: {},\n      threedaysprice: {},\n      fourdaysprice: {}\n    };\n    this.getBTCPrices = this.getBTCPrices.bind(this);\n    this.getETHPrices = this.getETHPrices.bind(this);\n    this.getLTCPrices = this.getLTCPrices.bind(this);\n  }\n  // This function gets the ETH price for a specific timestamp/date. The date is passed in as an argument\n  getETHPrices(date) {\n    return axios.get(\n      \"https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\" +\n        date\n    );\n  }\n  // This function gets the BTC price for a specific timestamp/date. The date is passed in as an argument\n  getBTCPrices(date) {\n    return axios.get(\n      \"https://min-api.cryptocompare.com/data/pricehistorical?fsym=BTC&tsyms=USD&ts=\" +\n        date\n    );\n  }\n  // This function gets the LTC price for a specific timestamp/date. The date is passed in as an argument\n  getLTCPrices(date) {\n    return axios.get(\n      \"https://min-api.cryptocompare.com/data/pricehistorical?fsym=LTC&tsyms=USD&ts=\" +\n        date\n    );\n  }\n  // This function gets the prices for the current date.\n  getTodayPrice() {\n    // Get today's date in timestamp\n    let t = moment().unix();\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n    axios\n      .all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n      .then(\n        axios.spread((eth, btc, ltc) => {\n          let f = {\n            date: moment.unix(t).format(\"MMMM Do YYYY\"),\n            eth: eth.data.ETH.USD,\n            btc: btc.data.BTC.USD,\n            ltc: ltc.data.LTC.USD\n          };\n          // Set the state of todayprice to the content of the object f\n          this.setState({ todayprice: f });\n        })\n      );\n  }\n  // This function gets the prices for the yesterday.\n  getYesterdayPrice() {\n    // Get yesterday's date in timestamp\n    let t = moment()\n      .subtract(1, \"days\")\n      .unix();\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n    axios\n      .all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n      .then(\n        axios.spread((eth, btc, ltc) => {\n          let f = {\n            date: moment.unix(t).format(\"MMMM Do YYYY\"),\n            eth: eth.data.ETH.USD,\n            btc: btc.data.BTC.USD,\n            ltc: ltc.data.LTC.USD\n          };\n          // Set the state of yesterdayprice to the content of the object f\n          this.setState({ yesterdayprice: f });\n        })\n      );\n  }\n  // This function gets the prices for the two days ago.\n  getTwoDaysPrice() {\n    // Get the date for two days ago in timestamp\n    let t = moment()\n      .subtract(2, \"days\")\n      .unix();\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n    axios\n      .all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n      .then(\n        axios.spread((eth, btc, ltc) => {\n          let f = {\n            date: moment.unix(t).format(\"MMMM Do YYYY\"),\n            eth: eth.data.ETH.USD,\n            btc: btc.data.BTC.USD,\n            ltc: ltc.data.LTC.USD\n          };\n          // Set the state of twodaysprice to the content of the object f\n          this.setState({ twodaysprice: f });\n        })\n      );\n  }\n  // This function gets the prices for the three days ago.\n  getThreeDaysPrice() {\n    // Get the date for three days ago in timestamp\n    let t = moment()\n      .subtract(3, \"days\")\n      .unix();\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n    axios\n      .all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n      .then(\n        axios.spread((eth, btc, ltc) => {\n          let f = {\n            date: moment.unix(t).format(\"MMMM Do YYYY\"),\n            eth: eth.data.ETH.USD,\n            btc: btc.data.BTC.USD,\n            ltc: ltc.data.LTC.USD\n          };\n          // Set the state of threedaysprice to the content of the object f\n          this.setState({ threedaysprice: f });\n        })\n      );\n  }\n  // This function gets the prices for the four days ago.\n  getFourDaysPrice() {\n    // Get the date for four days ago in timestamp\n    let t = moment()\n      .subtract(4, \"days\")\n      .unix();\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n    axios\n      .all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n      .then(\n        axios.spread((eth, btc, ltc) => {\n          let f = {\n            date: moment.unix(t).format(\"MMMM Do YYYY\"),\n            eth: eth.data.ETH.USD,\n            btc: btc.data.BTC.USD,\n            ltc: ltc.data.LTC.USD\n          };\n          // Set the state of fourdaysprice to the content of the object f\n          this.setState({ fourdaysprice: f });\n        })\n      );\n  }\n  // This is called when an instance of a component is being created and inserted into the DOM.\n  componentWillMount() {\n    this.getTodayPrice();\n    this.getYesterdayPrice();\n    this.getTwoDaysPrice();\n    this.getThreeDaysPrice();\n    this.getFourDaysPrice();\n  }\n\n  render() {\n    return (\n      <div className=\"history--section container\">\n        <h2>History (Past 5 days)</h2>\n        <div className=\"history--section__box\">\n          <div className=\"history--section__box__inner\">\n            <h4>{this.state.todayprice.date}</h4>\n            <div className=\"columns\">\n              <div className=\"column\">\n                <p>1 BTC = ${this.state.todayprice.btc}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 ETH = ${this.state.todayprice.eth}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 LTC = ${this.state.todayprice.ltc}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"history--section__box__inner\">\n            <h4>{this.state.yesterdayprice.date}</h4>\n            <div className=\"columns\">\n              <div className=\"column\">\n                <p>1 BTC = ${this.state.yesterdayprice.btc}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 ETH = ${this.state.yesterdayprice.eth}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 LTC = ${this.state.yesterdayprice.ltc}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"history--section__box__inner\">\n            <h4>{this.state.twodaysprice.date}</h4>\n            <div className=\"columns\">\n              <div className=\"column\">\n                <p>1 BTC = ${this.state.twodaysprice.btc}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 ETH = ${this.state.twodaysprice.eth}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 LTC = ${this.state.twodaysprice.ltc}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"history--section__box__inner\">\n            <h4>{this.state.threedaysprice.date}</h4>\n            <div className=\"columns\">\n              <div className=\"column\">\n                <p>1 BTC = ${this.state.threedaysprice.btc}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 ETH = ${this.state.threedaysprice.eth}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 LTC = ${this.state.threedaysprice.ltc}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"history--section__box__inner\">\n            <h4>{this.state.fourdaysprice.date}</h4>\n            <div className=\"columns\">\n              <div className=\"column\">\n                <p>1 BTC = ${this.state.fourdaysprice.btc}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 ETH = ${this.state.fourdaysprice.eth}</p>\n              </div>\n              <div className=\"column\">\n                <p>1 LTC = ${this.state.fourdaysprice.ltc}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default History;\n","import React from \"react\";\n\nimport Today from \"./Today/Today\";\nimport History from \"./History/History\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"\">\n      <div className=\"topheader\">\n        <header className=\"container\">\n          <nav className=\"navbar\">\n            <div className=\"navbar-brand\">\n              <span className=\"navbar-item\">Castanheira PusherCoins</span>\n            </div>\n            {/* <div className=\"navbar-end\">\n              <a\n                className=\"navbar-item\"\n                href=\"https://pusher.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Pusher.com\n              </a>\n            </div> */}\n          </nav>\n        </header>\n      </div>\n      <section className=\"results--section\">\n        <div className=\"container\">\n          <h1>\n            PusherCoins is a realtime price information about<br></br> BTC, ETH\n            and LTC.\n          </h1>\n        </div>\n        <div className=\"results--section__inner\">\n          <Today />\n          <History />\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}